// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosblogdemo.aptos.contract.service;

import com.github.wubuku.aptos.bean.Event;
import com.github.wubuku.aptos.utils.NodeApiClient;

import org.test.aptosblogdemo.domain.blog.AbstractBlogEvent;
import org.test.aptosblogdemo.aptos.contract.ContractConstants;
import org.test.aptosblogdemo.aptos.contract.DomainBeanUtils;
import org.test.aptosblogdemo.aptos.contract.AptosAccount;

import org.test.aptosblogdemo.aptos.contract.blog.CreateEvent;
import org.test.aptosblogdemo.aptos.contract.blog.ArticleAddedToBlog;
import org.test.aptosblogdemo.aptos.contract.blog.ArticleRemovedFromBlog;
import org.test.aptosblogdemo.aptos.contract.blog.DonationReceived;
import org.test.aptosblogdemo.aptos.contract.blog.VaultWithdrawn;
import org.test.aptosblogdemo.aptos.contract.repository.BlogEventRepository;
import org.test.aptosblogdemo.aptos.contract.repository.AptosAccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.*;
import java.util.*;


@Service
public class BlogEventService {

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Autowired
    private BlogEventRepository blogEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractBlogEvent event) {
        event.setStatus("D");
        blogEventRepository.save(event);
    }

    @Transactional
    public void pullCreateEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getCreateEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<CreateEvent>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.BLOG_MODULE_EVENTS,
                        ContractConstants.BLOG_MODULE_CREATE_EVENT_HANDLE_FIELD,
                        CreateEvent.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<CreateEvent> eventEnvelope : eventPage) {
                    saveCreateEvent(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getCreateEventNextCursor() {
        AbstractBlogEvent.CreateEvent lastEvent = blogEventRepository.findFirstCreateEventByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveCreateEvent(Event<CreateEvent> eventEnvelope) {
        AbstractBlogEvent.CreateEvent createEvent = DomainBeanUtils.toCreateEvent(eventEnvelope);
        if (blogEventRepository.findById(createEvent.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(createEvent);
    }

    @Transactional
    public void pullArticleAddedToBlogEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getArticleAddedToBlogEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<ArticleAddedToBlog>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.BLOG_MODULE_EVENTS,
                        ContractConstants.BLOG_MODULE_ARTICLE_ADDED_TO_BLOG_HANDLE_FIELD,
                        ArticleAddedToBlog.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<ArticleAddedToBlog> eventEnvelope : eventPage) {
                    saveArticleAddedToBlog(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getArticleAddedToBlogEventNextCursor() {
        AbstractBlogEvent.ArticleAddedToBlog lastEvent = blogEventRepository.findFirstArticleAddedToBlogByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveArticleAddedToBlog(Event<ArticleAddedToBlog> eventEnvelope) {
        AbstractBlogEvent.ArticleAddedToBlog articleAddedToBlog = DomainBeanUtils.toArticleAddedToBlog(eventEnvelope);
        if (blogEventRepository.findById(articleAddedToBlog.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(articleAddedToBlog);
    }

    @Transactional
    public void pullArticleRemovedFromBlogEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getArticleRemovedFromBlogEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<ArticleRemovedFromBlog>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.BLOG_MODULE_EVENTS,
                        ContractConstants.BLOG_MODULE_ARTICLE_REMOVED_FROM_BLOG_HANDLE_FIELD,
                        ArticleRemovedFromBlog.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<ArticleRemovedFromBlog> eventEnvelope : eventPage) {
                    saveArticleRemovedFromBlog(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getArticleRemovedFromBlogEventNextCursor() {
        AbstractBlogEvent.ArticleRemovedFromBlog lastEvent = blogEventRepository.findFirstArticleRemovedFromBlogByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveArticleRemovedFromBlog(Event<ArticleRemovedFromBlog> eventEnvelope) {
        AbstractBlogEvent.ArticleRemovedFromBlog articleRemovedFromBlog = DomainBeanUtils.toArticleRemovedFromBlog(eventEnvelope);
        if (blogEventRepository.findById(articleRemovedFromBlog.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(articleRemovedFromBlog);
    }

    @Transactional
    public void pullDonationReceivedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getDonationReceivedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<DonationReceived>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.BLOG_MODULE_EVENTS,
                        ContractConstants.BLOG_MODULE_DONATION_RECEIVED_HANDLE_FIELD,
                        DonationReceived.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<DonationReceived> eventEnvelope : eventPage) {
                    saveDonationReceived(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getDonationReceivedEventNextCursor() {
        AbstractBlogEvent.DonationReceived lastEvent = blogEventRepository.findFirstDonationReceivedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveDonationReceived(Event<DonationReceived> eventEnvelope) {
        AbstractBlogEvent.DonationReceived donationReceived = DomainBeanUtils.toDonationReceived(eventEnvelope);
        if (blogEventRepository.findById(donationReceived.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(donationReceived);
    }

    @Transactional
    public void pullVaultWithdrawnEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getVaultWithdrawnEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<VaultWithdrawn>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.BLOG_MODULE_EVENTS,
                        ContractConstants.BLOG_MODULE_VAULT_WITHDRAWN_HANDLE_FIELD,
                        VaultWithdrawn.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<VaultWithdrawn> eventEnvelope : eventPage) {
                    saveVaultWithdrawn(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getVaultWithdrawnEventNextCursor() {
        AbstractBlogEvent.VaultWithdrawn lastEvent = blogEventRepository.findFirstVaultWithdrawnByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveVaultWithdrawn(Event<VaultWithdrawn> eventEnvelope) {
        AbstractBlogEvent.VaultWithdrawn vaultWithdrawn = DomainBeanUtils.toVaultWithdrawn(eventEnvelope);
        if (blogEventRepository.findById(vaultWithdrawn.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(vaultWithdrawn);
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }
}
